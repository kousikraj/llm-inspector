# from core.api.inspectors.abstract_bedrock_inspector import AbstractBedrockInspector
import json
import boto3
import base64
from decimal import Decimal
from botocore.exceptions import ClientError
from core.api.commons.model_type import ModelType
from core.api.commons.utility import (
    get_s3_bucket_and_prefix,
    get_image_without_tmp_path,
    read_file_to_string,
)
from core.api.inspectors.abstract_bedrock_inspector import AbstractBedrockInspector

s3 = boto3.resource("s3")
rekognition_client = boto3.client("rekognition")
bucket, prefix = get_s3_bucket_and_prefix()
boto3_bedrock = boto3.client("bedrock-runtime")


def moderate_using_rekognition(file_name):
    # Storing image to S3 for sending it to Rekognition API
    file_name = prefix + file_name
    # Detecting Moderation Labels with Rekognition
    response = rekognition_client.detect_moderation_labels(
        Image={"S3Object": {"Bucket": bucket, "Name": file_name}}
    )
    return response["ModerationLabels"]


def detect_labels_using_rekognition(file_name):
    # Storing image to S3 for sending it to Rekognition API
    file_name = prefix + get_image_without_tmp_path(file_name)
    # Detecting Moderation Labels with Rekognition
    response = rekognition_client.detect_labels(
        Image={"S3Object": {"Bucket": bucket, "Name": file_name}}
    )
    return response["Labels"]


class BedrockClaudeInspector(AbstractBedrockInspector):
    def inspect(self) -> None:
        """
        Invokes a model with a multimodal prompt.
        Returns:
            None.
        """
        try:
            max_tokens = 2500
            original_prompt = self.payload.prompt
            system_prompt = """
Your are a quality and safety agent to inspect responses generated by other LLMs for quality and safety. 
You will carefully assess if the generated response like image meets all policies as defined in the context. 
You will check for all the details in the response and describe the content in detail.
            """
            policies_object = dict()
            for key in self.policies:
                policy = self.policies[key]
                policies_object[policy] = ""

            input_text = read_file_to_string(
                "inspectors/claude_sonnet_prompt_to_inspect.txt"
            )
            input_text = input_text.replace("<ORIGINAL_PROMPT>", original_prompt)
            input_text = input_text.replace("<POLICIES>", json.dumps(policies_object))
            for image in self.images:
                # Read reference image from file and encode as base64 strings.
                image_path = image

                with open(image_path, "rb") as image_file:
                    image_bytes = image_file.read()
                encoded_image = base64.b64encode(image_bytes).decode("utf-8")

                # Detect all labels
                labels = detect_labels_using_rekognition(image_path)
                detected_labels = []
                detected_entities = []
                for label in labels:
                    confidence = float(label["Confidence"])
                    if confidence < 50:
                        continue
                    detected_entities.append(
                        {
                            "name": label["Name"],
                            "parents": [obj["Name"] for obj in label["Parents"]],
                            "categories": [obj["Name"] for obj in label["Categories"]],
                            "confidence": "{:.1f}".format(label["Confidence"]),
                        }
                    )
                    detected_labels.append(label["Name"])
                print(detected_labels)
                input_text = input_text.replace(
                    "<ENTITIES>", json.dumps(detected_labels)
                )
                input_text = input_text.replace(
                    "<ENTITIES_BY_REKOGNITION>", json.dumps(detected_entities)
                )
                body = json.dumps(
                    {
                        "anthropic_version": ModelType.BEDROCK_ANTHROPHIC_VERSION.value,
                        "system": system_prompt,
                        "max_tokens": max_tokens,
                        "messages": [
                            {
                                "role": "user",
                                "content": [
                                    {
                                        "type": "image",
                                        "source": {
                                            "type": "base64",
                                            "media_type": "image/jpeg",
                                            "data": encoded_image,
                                        },
                                    },
                                    {"type": "text", "text": input_text},
                                ],
                            }
                        ],
                    }
                )
                response = boto3_bedrock.invoke_model(
                    modelId="anthropic.claude-3-sonnet-20240229-v1:0", body=body
                )
                response_body = json.loads(response.get("body").read())
                print(response_body["content"][0]["text"])
                self.save_inspected_results(image, response_body)
        except ClientError as err:
            message = err.response["Error"]["Message"]
            print("A client error occurred: %s", message)
            print("A client error occured: " + format(message))

    def init_inspector(self, images, policies, payload) -> None:
        print("BedrockClaudeInspector: Inspecting")
        super().init_inspector(images, policies, payload)

    def save_inspected_results(self, image, response_body) -> None:
        print("BedrockClaudeInspector: Saving Inspected Results")
        super().save_inspected_results(image, response_body)
